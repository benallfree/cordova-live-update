// Generated by CoffeeScript 1.10.0
(function() {
  var File, Http, LiveUpdate, Zip, extend, msprintf, req, sprintf,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  File = require('qordova-file');

  Http = require('qordova-http');

  Zip = require('qordova-zip');

  msprintf = require('sprintf-js');

  sprintf = msprintf.sprintf;

  extend = require('extend');

  req = require('micro-req');

  LiveUpdate = (function() {
    function LiveUpdate(options) {
      this.downloadAndInstall = bind(this.downloadAndInstall, this);
      this.loadApp = bind(this.loadApp, this);
      this.fetchLatestBuildInfo = bind(this.fetchLatestBuildInfo, this);
      this.go = bind(this.go, this);
      this.checkOnce = bind(this.checkOnce, this);
      this.checkRepeatedly = bind(this.checkRepeatedly, this);
      this.options = {
        updateUrl: "http://cordovaliveupdate.com/code",
        appEntryPoint: 'app.html',
        localStorageVar: 'buildno',
        recheckTimeoutMs: 5000,
        originalBuildId: 1,
        shouldDownload: function(current_id, latest_id) {
          return confirm(sprintf("Version %d is available for download (you are running %d). Update now?", latest_id, current_id));
        },
        getCurrentBuildId: (function(_this) {
          return function() {
            return Math.max(parseInt(localStorage.getItem(_this.options.localStorageVar)), _this.options.originalBuildId);
          };
        })(this),
        setCurrentBuildId: (function(_this) {
          return function(build_id) {
            return localStorage.setItem(_this.options.localStorageVar, build_id);
          };
        })(this)
      };
      extend(this.options, options);
    }

    LiveUpdate.prototype.checkRepeatedly = function() {
      return this.checkOnce().then((function(_this) {
        return function() {
          return setTimeout(_this.checkRepeatedly, _this.options.recheckTimeoutMs);
        };
      })(this));
    };

    LiveUpdate.prototype.checkOnce = function() {
      var current_build_id, d;
      d = Q.defer();
      current_build_id = this.options.getCurrentBuildId();
      console.log("Current build version is ", current_build_id);
      this.fetchLatestBuildInfo().then((function(_this) {
        return function(latest_build_id) {
          if (latest_build_id !== current_build_id) {
            if (_this.options.shouldDownload(current_build_id, latest_build_id)) {
              return _this.downloadAndInstall(latest_build_id).then(function() {
                return _this.loadApp(latest_build_id);
              });
            }
          } else {
            return console.log("We are running the latest version");
          }
        };
      })(this))["finally"]((function(_this) {
        return function() {
          return d.resolve(current_build_id);
        };
      })(this));
      return d.promise;
    };

    LiveUpdate.prototype.go = function() {
      return this.checkOnce().then((function(_this) {
        return function(build_id) {
          console.log("Loading app", arguments);
          return _this.loadApp(build_id);
        };
      })(this));
    };

    LiveUpdate.prototype.fetchLatestBuildInfo = function() {
      var deferred;
      deferred = Q.defer();
      console.log("Fetching latest build version info");
      req(sprintf('%s/liveupdate.json', this.options.updateUrl), {
        json: true
      }, (function(err, response) {
        var latest_build_id;
        if (response.statusCode === 200) {
          latest_build_id = response.body;
          console.log("Latest build is ", latest_build_id);
          return deferred.resolve(latest_build_id);
        } else {
          console.log("Error fetching version info", err, response);
          return deferred.reject(err);
        }
      }));
      return deferred.promise;
    };

    LiveUpdate.prototype.loadApp = function(build_id) {
      var app_html, new_app_html;
      app_html = this.options.appEntryPoint;
      if (build_id) {
        new_app_html = sprintf("%s%s/%s", cordova.file.dataDirectory, build_id, this.options.appEntryPoint);
        File.exists(app_html).then(function() {
          console.log("New app exists", new_app_html);
          return app_html = new_app_html;
        }).fail(function() {
          return console.log("New app is missing, using default");
        });
      }
      console.log("Navigating to ", app_html);
      return window.location = app_html;
    };

    LiveUpdate.prototype.downloadAndInstall = function(build_id) {
      var deferred, unzip_dir, url, zip_fname;
      deferred = Q.defer();
      zip_fname = sprintf("%s%s.zip", cordova.file.dataDirectory, build_id);
      unzip_dir = sprintf("%s%s", cordova.file.dataDirectory, build_id);
      url = sprintf("%s/%d.zip", this.options.updateUrl, build_id);
      Q.all([File.rm(zip_fname), File.rm(unzip_dir)]).then((function(_this) {
        return function() {
          return Http.download(url, zip_fname);
        };
      })(this)).then((function(_this) {
        return function() {
          return Zip.unzip(zip_fname, unzip_dir);
        };
      })(this)).then((function(_this) {
        return function() {
          console.log("New build version is ", build_id);
          return _this.options.setCurrentBuildId(build_id);
        };
      })(this)).fail((function(_this) {
        return function() {
          console.log("Install failed", arguments);
          return deferred.reject();
        };
      })(this))["finally"]((function(_this) {
        return function() {
          return deferred.resolve();
        };
      })(this));
      return deferred.promise;
    };

    return LiveUpdate;

  })();

  module.exports = LiveUpdate;

}).call(this);
